{"version":3,"sources":["webpack:///webpack/bootstrap f9a8e7c36948af09acd8","webpack:///./logic/move_worker.js","webpack:///./logic/logic_bridge.js","webpack:///./logic/board_node.js"],"names":["LogicBridge","require","Ai","self","onmessage","e","specMoves","data","specialMoves","testBoard","dupe","board","pieces","depth","bestMove","findBestMove","workerResult","moveData","Object","assign","move","checkmate","enPassant","castle","postMessage","BoardNode","module","exports","moves","parseMoveClusters","findAllPieces","currentSide","map","findAllLegalMovesByPiece","piece","length","side","forEach","currentNode","score","PIECE_VALUES","evaluateMove","newBoard","testMove","ownPieces","otherPieces","materialScore","evalMaterial","positionalScore","evalPosition","tacticScore","evalTactics","evalDoubleAttacks","evalCheckmate","attackedPieces","lvA","leastValuableAttacker","defended","type","push","sorted","sort","a","b","secondBestAttack","Math","max","ownScore","reduce","sum","el","otherScore","evalPiecePositionalValue","findAttackers","pos","value","pawnPositionalValue","rookPositionalValue","knightPositionalValue","bishopPositionalValue","queenPositionalValue","kingPositionalValue","pawn","posX","posY","abs","rook","knight","bishop","queen","king","left","right","yDir","filter","testSquare","xCoord"],"mappings":"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","file":"f9a8e7c36948af09acd8.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f9a8e7c36948af09acd8","const LogicBridge = require('./logic_bridge.js');\nconst Ai = require('./ai.js');\n\nself.onmessage = function (e) {\n  let specMoves = e.data.data.specialMoves;\n  let testBoard = Ai.dupe(e.data.data.board.pieces);\n  let depth = e.data.data.depth;\n  let bestMove = LogicBridge.findBestMove(testBoard,specMoves,depth);\n  let workerResult = 'Message received!';\n  let moveData = Object.assign({move: [], checkmate: false, enPassant: false, castle: false},bestMove);\n  postMessage(moveData);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./logic/move_worker.js","const Ai = require('./ai.js');\nconst BoardNode = require('./board_node.js');\n\nmodule.exports = {\n  findBestMove (board,specMoves,depth) {\n    let moves = Ai.parseMoveClusters(\n                  Ai.findAllPieces(board,specMoves.currentSide)\n                  .map(piece=> Ai.findAllLegalMovesByPiece(piece,board,specMoves))\n                );\n    if (moves.length === 0) return {checkmate: true, side: specMoves.currentSide};\n\n    let bestMove = null;\n    moves.forEach(move => {\n      let currentNode = new BoardNode(move,board,specMoves,depth);\n      if (currentNode.checkmate) {\n        return {move: currentNode.move, checkmate: true};\n      }\n      bestMove = bestMove ?\n        (currentNode.score > bestMove.score ?\n          currentNode : bestMove) : currentNode;\n    });\n    return {move: bestMove.move};\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./logic/logic_bridge.js","const Ai = require('./ai.js');\n\nconst PIECE_VALUES = {\n  'p': 100,\n  'r': 500,\n  'b': 300,\n  'n': 300,\n  'q': 900,\n  'k': 10000\n};\n\nclass BoardNode {\n  constructor(move,pieces,specialMoves,depth) {\n    this.move = move;\n    this.pieces = pieces;\n    this.specialMoves = specialMoves;\n    this.side = specialMoves.currentSide;\n    this.depth = depth;\n    this.checkmate = false;\n    this.score = this.evaluateMove();\n  }\n\n  evaluateMove () {\n    let newBoard = Ai.testMove(Ai.dupe(this.pieces),this.move[0],this.move[1]);\n    let ownPieces = Ai.findAllPieces(newBoard,this.side);\n    let otherPieces = Ai.findAllPieces(newBoard,this.side === 'w' ? 'b' : 'w');\n    let materialScore = this.evalMaterial(newBoard, ownPieces, otherPieces);\n    let positionalScore = this.evalPosition(newBoard, ownPieces);\n    let tacticScore = this.evalTactics(newBoard, ownPieces, otherPieces);\n    return materialScore + positionalScore + tacticScore;\n  }\n\n  evalTactics (ownPieces, otherPieces) {\n    let tacticScore = 0;\n    tacticScore += this.evalDoubleAttacks(this.pieces,otherPieces);\n    this.evalCheckmate();\n    return tacticScore;\n  }\n\n  evalCheckmate () {\n    let moves = Ai.parseMoveClusters(\n                  Ai.findAllPieces(this.pieces,this.side === 'w' ? 'b' : 'w')\n                  .map(piece=> Ai.findAllLegalMovesByPiece(piece,this.pieces,this.specialMoves))\n                );\n    if (moves.length === 0) {\n      this.checkmate = true;\n    }\n  }\n\n  evalDoubleAttacks(board,otherPieces) {\n    let attackedPieces = [];\n    otherPieces.forEach(piece => {\n      let lvA = this.leastValuableAttacker(board,piece);\n      if (lvA > 0) {\n        let defended = this.defended(board,piece);\n        let score = PIECE_VALUES[piece.type];\n          attackedPieces.push([score - lvA * defended]);\n      }\n    });\n    let sorted = attackedPieces.sort((a,b)=>b-a);\n    let secondBestAttack = sorted[1] || 0;\n    return Math.max(secondBestAttack,0);\n  }\n\n  evalMaterial (board, ownPieces, otherPieces) {\n    let ownScore =  ownPieces\n                    .map(piece => PIECE_VALUES[piece.type])\n                    .reduce((sum,el) => sum + el);\n\n    let otherScore = otherPieces\n                      .map(piece => PIECE_VALUES[piece.type])\n                      .reduce((sum,el) => sum + el);\n\n    return ownScore - otherScore;\n  }\n\n  evalPosition (board, ownPieces) {\n    let ownScore = ownPieces\n                    .map(piece=> this.evalPiecePositionalValue(piece,board))\n                    .reduce((sum,el) => sum + el);\n    return ownScore;\n  }\n\n  defended (board, piece) {\n    //Can use the findAttacker method but with own side to check for defended status\n    let defended = Ai.findAttackers(piece.pos, board, piece.side, true)[0];\n    if (defended) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  leastValuableAttacker (board, piece) {\n    let lvA = Ai.findAttackers (piece.pos, board, piece.side === 'w' ? 'b' : 'w', false);\n    if (lvA[0] && lvA[0][0]) {\n      return PIECE_VALUES[lvA[0][1]];\n    } else {\n      return 0;\n    }\n  }\n\n  evalPiecePositionalValue (piece,board) {\n    let value = 0;\n    switch (piece.type) {\n      case 'p':\n        value = this.pawnPositionalValue(piece,board);\n        break;\n      case 'r':\n        value = this.rookPositionalValue(piece,board);\n        break;\n      case 'n':\n        value = this.knightPositionalValue(piece,board);\n        break;\n      case 'b':\n        value = this.bishopPositionalValue(piece,board);\n        break;\n      case 'q':\n        value = this.queenPositionalValue(piece,board);\n        break;\n      case 'k':\n        value = this.kingPositionalValue(piece,board);\n        break;\n      default:\n\n    }\n    return value;\n  }\n\n  pawnPositionalValue (pawn,board) {\n    let posX = pawn.pos[0],\n      posY = pawn.pos[1],\n      value = 0;\n\n    value += (\n      30 * (0.25 / (Math.abs(3.5 - posY) * (Math.abs(3.5 - posX))))\n    );\n    let lvA = this.leastValuableAttacker (board, pawn);\n    if (lvA > 0) {\n      value -= Math.max(PIECE_VALUES[pawn.type] - lvA * (this.defended(board,pawn)),0);\n    }\n\n    return value;\n  }\n\n  rookPositionalValue (rook,board) {\n    let moves = Ai.findAllLegalMovesByPiece (rook,board,this.specialMoves);\n    let value = 0;\n\n    let lvA = this.leastValuableAttacker (board, rook);\n    if (lvA > 0) {\n      value -= Math.max(PIECE_VALUES[rook.type] - lvA * (this.defended(board,rook)),0);\n    }\n    return moves.length * 5 + value;\n  }\n\n  knightPositionalValue (knight,board) {\n    let value = 0;\n    let moves = Ai.findAllLegalMovesByPiece (knight,board,this.specialMoves);\n    moves.forEach(move => {\n      value += (\n        12 * (0.25 / Math.abs(3.5 - move[1][1]) * (Math.abs(3.5 - move[1][0])))\n      );\n    });\n    let lvA = this.leastValuableAttacker (board, knight);\n    if (lvA > 0) {\n      value -= Math.max(PIECE_VALUES[knight.type] - lvA * (this.defended(board,knight)),0);\n    }\n    if (this.defended(board,knight)) {\n      value += 25;\n    }\n    return value;\n  }\n\n  bishopPositionalValue (bishop,board) {\n    let value = 0;\n    let moves = Ai.findAllLegalMovesByPiece (bishop,board,this.specialMoves);\n    let lvA = this.leastValuableAttacker (board, bishop);\n    if (lvA > 0) {\n      value -= Math.max(PIECE_VALUES[bishop.type] - lvA * (this.defended(board,bishop)),0);\n    }\n    if (this.defended(board,bishop)) {\n      value += 25;\n    }\n    return moves.length * 8 + value;\n  }\n\n  queenPositionalValue (queen,board) {\n    let value = 0;\n    let moves = Ai.findAllLegalMovesByPiece (queen,board,this.specialMoves);\n    let lvA = this.leastValuableAttacker (board, queen);\n    if (lvA > 0) {\n      value -= Math.max(PIECE_VALUES[queen.type] - lvA * (this.defended(board,queen)),0);\n    }\n\n    return moves.length * 2 + value;\n  }\n\n  kingPositionalValue (king,board) {\n    let posX = king.pos[0],\n      posY = king.pos[1],\n      value = 0,\n      left = posX === 0 ? null : (posX - 1),\n      right = posX === 7 ? null : (posX + 1),\n      yDir = king.side === 'w' ?\n      (posY === 0 ? null : (posY - 1)) : (posY === 7 ? null : (posY + 1));\n    [left, posX, right].filter(el=>el).forEach(xCoord => {\n      let testSquare = board[yDir][xCoord][0];\n      if (testSquare[0] === king.side) {\n        if (testSquare[2] === 'p') {\n          value += 30;\n        } else {\n          value += 20;\n        }\n      }\n    });\n    if (king.pos[0] === 6) {\n      value += 200;\n    }\n    return value;\n  }\n}\n\nmodule.exports = BoardNode;\n\n\n\n// WEBPACK FOOTER //\n// ./logic/board_node.js"],"sourceRoot":""}